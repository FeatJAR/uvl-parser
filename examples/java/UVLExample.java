import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;

import de.neominik.uvl.UVLParser;
import de.neominik.uvl.ast.Feature;
import de.neominik.uvl.ast.Group;
import de.neominik.uvl.ast.UVLModel;

public class UVLExample {
	
	
	public static void main(String[] args) {
		
		// Parse feature model
		UVLModel server = parseModel("example.uvl");
		
		// Get root feature
		Feature root = getRootFeature(server);
		
		// Print feature attributes of root feature
		printAttributes(root);
		
		
		// Get all mandatory children of the root feature
		Feature[] children = getMandatoryChildren(root);
		
		// add optional feature to root
		addOptionalFeature(root, "Docker");
		
		// write feature model
		writeModel(server);
	}
	
	/**
	 * Parses feature model specified in UVL and returns resulting UVLModel
	 * @param path path to the file
	 * @return
	 */
	private static UVLModel parseModel(String path) {
		try {
			String content = new String(Files.readAllBytes(Paths.get(path)), StandardCharsets.UTF_8);
			Object result = UVLParser.parse(content);
			if (result instanceof UVLModel) {
				return (UVLModel) result;
			} else {
				System.out.println("Faulty input");
				return null;
			}
		} catch (IOException e) {
			System.out.println("File not readable");
			return null;
		}

	}
	
	/**
	 * Write given UVLModel to file. Name is automatically generated by the namespace of the file
	 * @param model
	 */
	private static void writeModel(UVLModel model) {
	    try {
	    	BufferedWriter writer = new BufferedWriter(new FileWriter(model.getNamespace() + ".uvl"));
	    	writer.write(model.toString());
			writer.close();
			System.out.println("Resulting model stored in " + model.getNamespace() + ".uvl");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	 * Get root feature of a given feature model
	 * @param model
	 * @return
	 */
	private static Feature getRootFeature(UVLModel model) {
		return model.getRootFeatures()[0];
	}
	
	/**
	 * Print all attributes of a given feature
	 * @param feat
	 */
	private static void printAttributes(Feature feat) {
		for (Object entry : feat.getAttributes().entrySet()) {
			System.out.println("Attribute name:"+ entry.toString());
		}
	}
	
	
	/**
	 * Get all children of the desired feature
	 * @param feat
	 * @return
	 */
	private static Feature[] getMandatoryChildren(Feature feat) {
		for (Group group : feat.getGroups()) {
			if (group.getType().equals("mandatory")) {
				return group.getChildren();
			}
		}
		return new Feature[0];
	}
	
	/**
	 * Add an optional feature to a given parent
	 * @param parent parent of the new feature
	 * @param newFeatureName name for the new feature
	 */
	private static void addOptionalFeature(Feature parent, String newFeatureName) {
		for (Group group : parent.getGroups()) {
			if (group.getType().equals("optional")) {
				Feature[] oldFeatures = group.getChildren();
				Feature[] newFeatures = Arrays.copyOf(oldFeatures, oldFeatures.length + 1);
				Feature newFeature = new Feature();
				newFeature.setName(newFeatureName);
				newFeatures[newFeatures.length - 1] = newFeature;
				group.setChildren(newFeatures);
			}
		}
	}
	
	
}
